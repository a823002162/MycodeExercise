package com.atguigu.inter;

/*
接口的使用:
    1. 使用 关键字interface 声明一个接口

接口里可以定义的成员:
    1. 定义的变量默认被public static final修饰，是静态成员常量
    2. 接口里定义的方法默认被 public abstract修饰，是抽象方法，不能有方法体
    3. JDK8以后，可以使用关键字 default定义一个有方法体的默认方法
    4. JDK8以后，可以使用定义静态方法。
    5. JDK9以后，还可以使用 private定义私有方法。

注意事项:
    1. 接口里不能定义变量，变量默认被 public static final 修饰，是静态成员常量
    2. JDK8之前只能定义 静态成员常量和抽象方法
        JDK8以后可以定义 默认方法，静态方法，JDK9以后可以定义私有方法
    3. 如果不指定权限修饰符，接口里的方法和静态成员常量默认都被public修饰
    4. 接口里不能定义构造方法!
    5. 和抽象类一样，接口也不能直接创建实例对象
        如果想要创建实例对象，有两种方式:
            a. 定义子类实现接口，创建子类对象
            b. 使用匿名内部类创建接口对象

思考:
    1. 为什么 JDK8以后新增了默认方法?
        如果没有默认方法，一个类实现接口以后需要实现所有的抽象方法。
        假如一个接口A里有10个抽象方法，里面8个方法默认实现方式都一样，只有2个抽象方法a()b()需要让用户重写
        此时需要使用中间一个抽象类B 实现8个默认方式，留下2个a()b()不实现
        后续的类C继承自抽象类B，而不是实现接口A,实现a()和b()即可  适配器设计模式
        JDK8新增了默认方法，把中间的适配器省略
    2. 为什么 JDK9以后新增了私有方法?
        JDK8新增了默认方法，在默认方法m()里可能会出现大段的代码需要再封装成为一个方法x()
        这个方法x()只为接口里的默认方法m()服务，外部不应该直接调用到方法x()
    3. 接口和抽象类有什么区别?怎样配合使用?  接口存在的意义!
*/
public class InterfaceDemo1 {
    public static void main(String[] args) {
        System.out.println(Demo.x);
        // Demo.x = 5;
    }
}
